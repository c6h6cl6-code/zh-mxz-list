name: Disable Interaction of Prohibited Users

on:
  issues:
    types: [opened, reopened]
  issue_comment:
    types: [created]
  pull_request:
    types: [opened, reopened]

permissions:
  issues: write
  pull-requests: write
  contents: read

jobs:
  manage-prohibited-users:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Handle issues, PRs, comments, and reopens from prohibited users
        uses: actions/github-script@v7
        with:
          script: |
            // Load blocklist from secret and parse it into an array
            const blocklist = '${{ vars.BLOCKLIST_USERS }}';
            const prohibitedUsers = blocklist ? blocklist.split(',').map(user => user.trim()) : [];

            const eventType = context.eventName;
            let actor;

            // Determine the actor based on event type
            if (eventType === 'issues') {
              actor = context.payload.issue.user.login;
            } else if (eventType === 'issue_comment') {
              actor = context.payload.comment.user.login;
            } else if (eventType === 'pull_request') {
              actor = context.payload.pull_request.user.login;
            }

            // Check if the actor is prohibited once
            if (prohibitedUsers.includes(actor)) {
              // Handle issue opening or reopening
              if (eventType === 'issues') {
                await github.rest.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.payload.issue.number,
                  state: 'closed'
                });
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.payload.issue.number,
                  body: `This issue was automatically closed because it was ${context.payload.action} by a restricted user.`
                });
              }

              // Handle comment creation (on issues or PRs)
              if (eventType === 'issue_comment') {
                await github.rest.issues.deleteComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: context.payload.comment.id
                });
              }

              // Handle pull request opening or reopening
              if (eventType === 'pull_request') {
                await github.rest.pulls.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: context.payload.pull_request.number,
                  state: 'closed'
                });
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.payload.pull_request.number,
                  body: `This pull request was automatically closed because it was ${context.payload.action} by a restricted user.`
                });
              }
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
